<?php

// Include the WordPress REST API client library and WooCommerce library
require 'vendor/autoload.php';
use Automattic\WooCommerce\Client;

// Set your API key, store ID, and WooCommerce store URL
$api_key = 'your-api-key';
$store_id = 'your-store-id';
$store_url = 'your-store-url';

// Set the API endpoint URLs
$items_endpoint_url = "https://areskidsport.hicorecloud.se/WebShopApi/api/{$store_id}/items";
$item_stocks_endpoint_url = "https://areskidsport.hicorecloud.se/WebShopApi/api/{$store_id}/items/{itemId}/itemStocks";
$item_prices_endpoint_url = "https://areskidsport.hicorecloud.se/WebShopApi/api/{$store_id}/items/{itemId}/prices";

// Set the headers for the request
$headers = [
  'Authorization' => "Bearer {$api_key}",
  'Accept' => 'application/json'
];

// Set the query parameters for the request
$query_params = [
  'sinceversion' => 'your-since-version'
];

// Create a new Guzzle HTTP client
$client = new \GuzzleHttp\Client();

// Create a new WooCommerce client
$woocommerce = new Client(
  $store_url,
  $api_key,
  $api_key,
  [
    'wp_api' => true,
    'version' => 'wc/v3'
  ]
);

/**
 * Function to sync data from the Hicore API
 *
 * @return void
 */
function sync_data_from_hicore_api() {
  global $items_endpoint_url, $headers, $query_params, $client, $woocommerce;

// Make the GET request to the items endpoint
  $response = $client->request('GET', $items_endpoint_url, [
    'headers' => $headers,
    'query' => $query_params
  ]);

// Check the response status code
  if ($response->getStatusCode() == 200) {
    // Get the response body
    $response_body = json_decode($response->getBody(), true);

// Check if there are more pages of data
$has_more_pages = isset($response_body['hasMorePages']) && $response_body['hasMorePages'];

// Loop through the pages of data
while ($has_more_pages) {

// Set the since version for the next page
    $query_params['sinceversion'] = $response_body['nextSinceVersion'];
  
// Make the GET request to the items endpoint
    $response = $client->request('GET', $items_endpoint_url, [
      'headers' => $headers,
      'query' => $query_params
    ]);
  
// Check the response status code
    if ($response->getStatusCode() == 200) {
    // Get the response body
      $response_body = json_decode($response->getBody(), true);
  
      // Check if there are more pages of data
      $has_more_pages = isset($response_body['hasMorePages']) && $response_body['hasMorePages'];
  
      // Loop through the items
      foreach ($response_body['items'] as $item) {
        // Skip the item if it is not active
        if (!$item['isActive']) {
          continue;
        }
  
        // Set the item ID and item number
        $item_id = $item['id'];
        $item_number = $item['itemNumber'];
  
        // Set the price and sale price
        $price = $item['price'];
        $sale_price = $item['salePrice'];
  
        // Set the stock level
        $stock_level = $item['stockLevel'];
  
        // Set the product data
        $product_data = [
          'name' => $item['name'],
          'type' => 'simple',
          'regular_price' => $price,
          'sale_price' => $sale_price,
          'stock_quantity' => $stock_level,
          'meta_data' => [
            [
              'key' => 'item_id',
              'value' => $item_id
            ],
            [
              'key' => 'item_number',
              'value' => $item_number
            ]
          ]
        ];
  
        // Check if the product already exists in WooCommerce
        $existing_product = $woocommerce->get('products', [
          'sku' => $item_number
        ]);
  
        // Update the product if it already exists
        if (!empty($existing_product)) {
          $product_id = $existing_product[0]['id'];
          $woocommerce->put('products/' . $product_id, $product_data);
        }
      
          // Create the product if it does not exist
          if (!$product_exists) {
            // Set the product data
            $product_data = [
              'name' => $item['name'],
              'type' => $item['isPackage'] ? 'grouped' : 'simple',
              'description' => $item['salesText'],
              'short_description' => $item['labelText'],
              'sku' => $item['itemNumber'],
              'regular_price' => $price,
              'sale_price' => $sale_price,
              'manage_stock' => true,
              'stock_quantity' => $stock_level,
              'meta_data' => [
                [
                  'key' => 'item_id',
                  'value' => $item['id']
                ]
              ]
            ];
        
            // Check if the product has a model
            if (isset($item['model'])) {
              // Set the model name as the product's name
              $product_data['name'] = $item['model']['name'];
        
              // Set the model number as the product's SKU
              $product_data['sku'] = $item['model']['number'];
            }
        
            // Check if the product has a season
            if (isset($item['season'])) {
              // Set the product's season name as a custom field
              $product_data['meta_data'][] = [
                'key' => 'season',
                'value' => $item['season']['name']
              ];
            }
        
            // Check if the product has a brand
            if (isset($item['brand'])) {
              // Set the product's brand name as a custom field
              $product_data['meta_data'][] = [
                'key' => 'brand',
                'value' => $item['brand']['name']
              ];
            }
        
            // Check if the product has a family
            if (isset($item['family'])) {
              // Set the product's family name as a custom field
              $product_data['meta_data'][] = [
                'key' => 'family',
                'value' => $item['family']['name']
              ];
            }
        
// Check if the product has a category
    if (isset($item['category'])) {
        // Get the product category data
        $category_data = $item['category'];
  
        // Check if the category exists in WooCommerce
        $category_id = get_term_by('name', $category_data['name'], 'product_cat')->term_id;
  
        // Create the category if it does not exist
        if (!$category_id) {
          $category_id = wp_insert_term($category_data['name'], 'product_cat');
        }
  
        // Add the category ID to the product data
        $product_data['categories'][] = ['id' => $category_id];
      }
  
      // Check if the product has a model
      if (isset($item['model'])) {
        // Get the product model data
        $model_data = $item['model'];
  
        // Set the product type to variable if it has a model
        $product_data['type'] = 'variable';
  
        // Set the product attributes
        $product_data['attributes'][] = [
          'name' => 'Model',
          'options' => [$model_data['name']]
        ];
      } else {
        // Set the product type to simple if it does not have a model
        $product_data['type'] = 'simple';
      }
  
      // Check if the product has attribute values
      if (isset($item['attributeValues']) && !empty($item['attributeValues'])) {
        // Loop through the attribute values
        foreach ($item['attributeValues'] as $attribute_value) {
          // Get the attribute data
          $attribute_data = $attribute_value['attribute'];
  
          // Check if the attribute exists in WooCommerce
          $attribute_id = wc_get_attribute_taxonomy_by_name($attribute_data['name']);
  
          // Create the attribute if it does not exist
          if (!$attribute_id) {
            $attribute_id = wc_create_attribute([
              'name' => $attribute_data['name'],
              'slug' => sanitize_title($attribute_data['name']),
              'type' => 'select',
              'order_by' => 'menu_order',
              'has_archives' => false
            ]);
          }
  
                // Add the attribute value to the product data
                $product_data['attributes'][] = [
                    'id' => $attribute_value['attribute']['id'],
                    'name' => $attribute_value['attribute']['name'],
                    'option' => $attribute_value['name']
                  ];
                }
        
                // Check if the product is a variable product
                if (isset($item['model']) && $item['model']['number'] == 0) {
                  // Update the product data with the variation data
                  $product_data['type'] = 'variable';
                  $product_data['variations'] = [];
        
                  // Set the item ID as the variation ID
                  $variation_id = $item['id'];
        
                  // Set the variation data
                  $variation_data = [
                    'id' => $variation_id,
                    'regular_price' => $price['price'],
                    'sale_price' => $price['price'],
                    'stock_quantity' => $item_stock['stock'],
                    'attributes' => $product_data['attributes']
                  ];
        
                  // Add the variation data to the product data
                  $product_data['variations'][] = $variation_data;
                } else {
                  // Update the product data with the price and stock data
                  $product_data['regular_price'] = $price['price'];
                  $product_data['sale_price'] = $price['price'];
                  $product_data['stock_quantity'] = $item_stock['stock'];
                }
        
                // Update the product in WooCommerce
                $woocommerce->put("products/{$product_id}", $product_data);
              }
            }
        
            // Check if there are more pages of data
            $has_more_pages = isset($response_body['hasMorePages']) && $response_body['hasMorePages'];
          }
        }
        
        // Schedule the sync data from Hicore API function to run every 5 minutes
        wp_schedule_event(time(), 'minute_5', 'sync_data_from_hicore_api');
